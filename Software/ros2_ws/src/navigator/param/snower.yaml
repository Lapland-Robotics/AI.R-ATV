# AMCL server -- Adaptive Monte Carlo Localization for robot localization
# https://docs.nav2.org/configuration/packages/configuring-amcl.html
amcl:
  ros__parameters:
    use_sim_time: False
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_footprint"
    do_beamskip: False # beamskip disabled
    # beam_skip_distance: 0.5
    # beam_skip_error_threshold: 0.9
    # beam_skip_threshold: 0.3
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 4.0
    laser_max_range: 10.0
    laser_min_range: 0.3
    laser_model_type: "likelihood_field_prob"
    set_initial_pose: False # Use default initial pose (0, 0, 0)
    max_beams: 200
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.9
    z_max: 0.05
    z_rand: 0.1
    z_short: 0.05
    scan_topic: scan_filtered # scan
    map_topic: map
    first_map_only: False

# Behavior Tree Navigator -- select witch behavior tree XML files to use
# https://docs.nav2.org/configuration/packages/configuring-bt-navigator.html
bt_navigator:
  ros__parameters:
    # use_sim_time: False
    # Use default behavior tree XML files
    # default_nav_to_pose_bt_xml: "navigate_to_pose_w_replanning_and_recovery.xml"
    # default_nav_through_poses_bt_xml: "navigate_through_poses_w_replanning_and_recovery.xml"
    always_reload_bt_xml: false
    bt_loop_duration: 10
    filter_duration: 1.0
    default_server_timeout: 20
    transform_tolerance: 0.1
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
      enable_groot_monitoring: false
      groot_server_port: 1667
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
      enable_groot_monitoring: false
      groot_server_port: 1669
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
    error_code_name_prefixes:
      - assisted_teleop
      - backup
      - compute_path
      - dock_robot
      - drive_on_heading
      - follow_path
      - nav_thru_poses
      - nav_to_pose
      - spin
      - route
      - undock_robot
      - wait

# Controller server -- short term controller for following paths
# https://docs.nav2.org/configuration/packages/configuring-controller-server.html
controller_server:
  ros__parameters:
    # use_sim_time: False
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.2
    min_y_velocity_threshold: 0.0
    min_theta_velocity_threshold: 0.1
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] 
    current_goal_checker: ["general_goal_checker"]
    controller_plugins: ["FollowPath"]
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.2
      yaw_goal_tolerance: 0.2
    # MPPI Controller -- Model Predictive Path Integral Controller
    # https://docs.nav2.org/configuration/packages/configuring-mppic.html
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      motion_model: "DiffDrive"
      critics: ["ConstraintCritic", "CostCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]
      iteration_count: 1
      batch_size: 1000
      time_steps: 40 # time_steps*model_dt = max_distance_to_plan < local costmap radius
      model_dt: 0.05 # model_dt = 1 / controller_frequency
      vx_std: 0.2
      vy_std: 0.0
      wz_std: 0.4
      vx_max: 0.6
      vy_max: 0.0
      vx_min: -0.6
      wz_max: 2.0
      ax_max: 1.5
      ay_min: -0.0
      ay_max: 0.0
      ax_min: -1.5
      az_max: 2.0
      temperature: 0.3
      gamma: 0.015
      visualize: false
      publish_optimal_trajectory: true
      retry_attempt_limit: 1
      reset_period: 1.0 # (only in Humble)
      regenerate_noises: false
      # Trajectory visualizer parameters
      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3
      # Path Handler parameters
      transform_tolerance: 0.1
      prune_distance: 1.5
      max_robot_pose_search_dist: 2.5 # costmap size / 2
      enforce_path_inversion: false
      inversion_xy_tolerance: 0.2
      inversion_yaw_tolerance: 0.4
      allow_parameter_qos_overrides: true
      # Trajectory Validator parameters
      TrajectoryValidator:
        plugin: "mppi/DefaultOptimalTrajectoryValidator"
        collision_lookahead_time: 2.0
        consider_footprint: false
      # Critic parameters
      # Note : threshold_to_consider is used to change behavior of the controller when near the goal
      # Note : Path Critics and Prefer Forward Critic will be disabled when under their threshold
      # Note : Goal Critics will be enabled when under their threshold

      # Constraint Critic parameters -- penalizes trajectories that violate kinematic constraints
      ConstraintCritic:
        enabled: true
        cost_weight: 4.0
        cost_power: 1
      # Goal Angle Critic parameters -- penalizes trajectories that do not align with the goal angle
      GoalAngleCritic:
        enabled: true
        cost_weight: 3.0
        cost_power: 1
        threshold_to_consider: 0.6
      # Goal Critic parameters -- penalizes trajectories that do not reach the goal
      GoalCritic:
        enabled: true
        cost_weight: 17.0
        cost_power: 1
        threshold_to_consider: 1.
      # Obstacles Critic parameters -- penalizes trajectories that collide with obstacles
      # Note: if the weight are too high, the robot will not go in high cost area to reach the goal
      ObstaclesCritic:
        enabled: true
        critical_weight: 20.0
        repulsion_weight: 1.0
        cost_power: 1
        consider_footprint: false
        collision_cost: 10000.0
        collision_margin_distance: 0.1
        near_goal_distance: 0.5
        cost_scaling_factor: 1.0 # (only in Humble) same as inflation_layer
        inflation_radius: 2.4 # (only in Humble) same as inflation_layer
      # Cost Critic parameters -- penalizes trajectories that go in high cost areas
      # Note: if the weight are too high, the robot will not go in high cost area to reach the goal
      CostCritic:
        enabled: true
        cost_weight: 3.0
        cost_power: 1
        consider_footprint: false
        collision_cost: 10000.0
        near_collision_cost: 253 # < 255
        critical_cost: 300.0
        near_goal_distance: 1.5
        trajectory_point_step: 2
      # Path Align Critic parameters -- penalizes trajectories that do not align with the path
      PathAlignCritic:
        enabled: true
        cost_weight: 22.0
        cost_power: 1
        threshold_to_consider: 1.0
        offset_from_furthest: 20
        max_path_occupancy_ratio: 0.05
        use_path_orientations: false
        trajectory_point_step: 4
      # Path Angle Critic parameters -- penalizes trajectories that have a high relative angle to the path
      PathAngleCritic:
        enabled: true
        cost_weight: 5.0
        cost_power: 1
        threshold_to_consider: 1.0
        offset_from_furthest: 10
        max_angle_to_furthest: 0.785398 # 45 degrees
        mode: 2
      # Path Follow Critic parameters -- penalizes trajectories that do not follow the path
      PathFollowCritic:
        enabled: true
        cost_weight: 6.0
        cost_power: 1
        threshold_to_consider: 0.7
        offset_from_furthest: 6
      # Prefer Forward Critic parameters -- penalizes trajectories that do not prefer forward motion
      # Note: is the weight is too high, the robot will not go in reverse when it is optimal
      PreferForwardCritic:
        enabled: false
        cost_weight: 4.0
        cost_power: 1
        threshold_to_consider: 1.0
      # Velocity Deadband Critic parameters -- penalizes trajectories that have velocities in the deadband
      VelocityDeadbandCritic:
        enabled: true
        cost_weight: 30.0
        cost_power: 1
        deadband_velocities: [0.2, 0.0, 0.6]

# Local Costmap -- used for obstacle avoidance and short term path planning by the controller server
# https://docs.nav2.org/configuration/packages/configuring-costmaps.html
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 20.0
      publish_frequency: 5.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: False
      rolling_window: true
      width: 5
      height: 5
      resolution: 0.05
      robot_radius: 0.6
      always_send_full_costmap: false
      plugins: ["denoise_layer", "obstacle_layer", "inflation_layer", ]
      denoise_layer:
        plugin: "nav2_costmap_2d::DenoiseLayer"
        enabled: True
        minimal_group_size: 6
        group_connectivity_type: 4
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan_filtered
        scan_filtered:
          topic: /scan_filtered # /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.3
          obstacle_max_range: 3.0
          obstacle_min_range: 0.0
      # Note: it is really important to set inflation_radius high enough so it sufficiently cover the map for the controller server
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        inflation_radius: 2.4
        cost_scaling_factor: 1.0

# Global Costmap -- used for long term path planning by the planner server
# https://docs.nav2.org/configuration/packages/configuring-costmaps.html
global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 4.0
      publish_frequency: 2.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False  # was True
      robot_radius: 0.6
      resolution: 0.05
      width: 10
      height: 10
      track_unknown_space: true
      always_send_full_costmap: False
      plugins: ["static_layer", "denoise_layer", "obstacle_layer", "inflation_layer"]
      # static_layer only for global costmap
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      denoise_layer:
        plugin: "nav2_costmap_2d::DenoiseLayer"
        enabled: true
        minimal_group_size: 2
        group_connectivity_type: 8
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan_filtered
        scan_filtered:
          topic: /scan_filtered # /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.3
          obstacle_max_range: 3.0
          obstacle_min_range: 0.0
      # Note: it is really important to set inflation_radius high enough so it sufficiently cover the map for the planner server
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.0
        inflation_radius: 2.4

# Map Saver -- used to save the map when the robot is done navigating
# https://docs.nav2.org/configuration/packages/configuring-map-server.html
# NOTE : not configured right now
map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

# Planner server -- long term path planning using the global costmap
# https://docs.nav2.org/configuration/packages/configuring-planner-server.html
planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: False
    planner_plugins: ["GridBased"]
    # SmacPlanner2D -- 2D grid based planner
    # https://docs.nav2.org/configuration/packages/smac/configuring-smac-2d.html
    GridBased:
      plugin: "nav2_smac_planner/SmacPlanner2D" 
      tolerance: 0.1
      downsample_costmap: false
      downsampling_factor: 1
      allow_unknown: true
      max_iterations: 1000000
      max_on_approach_iterations: 1000
      max_planning_time: 2.0
      cost_travel_multiplier: 2.0
      use_final_approach_orientation: false # set false to use the Nav2 Goal orientation
      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1.0e-10

# Behavior Server -- used to execute behaviors like spin, backup, wait, etc.
# https://docs.nav2.org/configuration/packages/configuring-behavior-server.html
behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
      max_rotational_vel: 0.8
      min_rotational_vel: 0.6
      rotational_acc_lim: 1.0
    backup:
      plugin: "nav2_behaviors/BackUp"
      acceleration_limit: 1.0
      deceleration_limit: -1.0
      minimum_speed: 0.2
    wait:
      plugin: "nav2_behaviors/Wait"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_link
    transform_timeout: 0.1
    simulate_ahead_time: 2.0
    use_sim_time: false

# Waypoint Follower -- used to follow a sequence of goals (waypoints)
# https://docs.nav2.org/configuration/packages/configuring-waypoint-follower.html
waypoint_follower:
  ros__parameters:
    stop_on_failure: false
    loop_rate: 200
    global_frame_id: "map"
    waypoint_task_executor_plugin: "wait_at_waypoint"   
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 1000

# Velocity Smoother -- used to smooth the velocities sent to the robot
# https://docs.nav2.org/configuration/packages/configuring-velocity-smoother.html
# NOTE : Take controller command on /cmd_vel_nav topic and publish smoothed command on /cmd_vel topic
# NOTE : Does not smooth recovery actions like spin, backup, wait, etc as they are published on /cmd_vel topic
velocity_smoother:
  ros__parameters:
    smoothing_frequency: 40.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.6, 0.0, 2.0]
    min_velocity: [-0.6, 0.0, -2.0]
    deadband_velocity: [0.2, 0.0, 0.1]
    velocity_timeout: 1.0
    max_accel: [1.0, 0.0, 1.0]
    max_decel: [-1.0, 0.0, -1.0]
    odom_topic: "odom"
    odom_duration: 0.1
    enable_stamped_cmd_vel: false

# Smoother Server -- used to smooth the path generated by the planner server
# https://docs.nav2.org/configuration/packages/configuring-smoother-server.html
# NOTE : not used in defaults xml behavior trees
smoother_server:
  ros__parameters:
    costmap_topic: global_costmap/costmap_raw
    footprint_topic: global_costmap/published_footprint
    robot_base_frame: base_link
    transform_timeout: 0.1
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      do_refinement: True